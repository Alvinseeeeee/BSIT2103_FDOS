package BSIT2103_FDOS;

import BSIT2103_FDOS.BackEnd2.Waiter;
import java.awt.Component;
import java.sql.Connection;
import java.sql.Statement;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import BSIT2103_FDOS.Control_Connector.DBConnect;
import java.sql.ResultSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.table.DefaultTableModel;

public class AssignTables extends javax.swing.JFrame {

    private Map<Integer, Waiter> waiterMap = new HashMap<>();
    private Connection connect;
    private Component rootPane;
    
    
    public AssignTables() {
        initComponents();
        DBConnect dbconnect = new DBConnect();
        this.connect = dbconnect.getConnection();
        
        
        populateWaiterComboBox();
        populateTableList(); 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        WaiterComboBox = new javax.swing.JComboBox<>();
        AssignWaiterButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        AssignWaiterBackButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(161, 138, 121));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Table", "Capacity"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        WaiterComboBox.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        WaiterComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        WaiterComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WaiterComboBoxActionPerformed(evt);
            }
        });

        AssignWaiterButton.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        AssignWaiterButton.setText("ENTER");
        AssignWaiterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AssignWaiterButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel1.setText("ASSIGN WAITER TO  A TABLE");

        jLabel2.setFont(new java.awt.Font("Century Gothic", 0, 10)); // NOI18N
        jLabel2.setText("Waiter List:");

        AssignWaiterBackButton.setFont(new java.awt.Font("Century Gothic", 0, 10)); // NOI18N
        AssignWaiterBackButton.setText("BACK");
        AssignWaiterBackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AssignWaiterBackButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(AssignWaiterBackButton)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 424, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(95, 95, 95)
                                .addComponent(jLabel1))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(WaiterComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(280, 280, 280)
                                .addComponent(AssignWaiterButton))
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(31, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(WaiterComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AssignWaiterButton))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(AssignWaiterBackButton)
                .addGap(93, 93, 93))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 382, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 67, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void WaiterComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WaiterComboBoxActionPerformed
        
    }//GEN-LAST:event_WaiterComboBoxActionPerformed

    private void AssignWaiterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AssignWaiterButtonActionPerformed
        String selectedWaiterName = (String) WaiterComboBox.getSelectedItem();
    if (selectedWaiterName == null) {
        JOptionPane.showMessageDialog(null, "Please select a waiter.");
        return;
    }

    Waiter selectedWaiter = null;
    for (Waiter w : waiterMap.values()) {
        if (w.getWaiterName().equals(selectedWaiterName)) {
            selectedWaiter = w;
            break;
        }
    }

    if(selectedWaiter == null) {
        JOptionPane.showMessageDialog(null, "Error: Waiter not found.");
        return;
    }

    int waiterId = selectedWaiter.getWaiterId();

    int selectedRow = jTable1.getSelectedRow();
    if(selectedRow != -1) {
        int tableId = (int) jTable1.getValueAt(selectedRow, 0);

        try{
            String updateQuery = "UPDATE tables SET waiter_id = ? WHERE table_id = ?";
            PreparedStatement pstmt = connect.prepareStatement(updateQuery);
            pstmt.setInt(1, waiterId);
            pstmt.setInt(2, tableId);

            int rowsAffected = pstmt.executeUpdate();
            if(rowsAffected > 0){
                JOptionPane.showMessageDialog(null, "Waiter assigned to table successfully.");
                populateTableList();
            } 
            else{
                JOptionPane.showMessageDialog(null, "Error: Could not assign waiter.");
            }
        } 
        catch(SQLException ex){
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error assigning waiter: " + ex.getMessage());
        }
    } 
    else{
        JOptionPane.showMessageDialog(null, "Please select a table.");
    }
    }//GEN-LAST:event_AssignWaiterButtonActionPerformed

    private void AssignWaiterBackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AssignWaiterBackButtonActionPerformed
        ManagementPageForm management = new ManagementPageForm();
        management.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_AssignWaiterBackButtonActionPerformed

    private void populateWaiterComboBox() {
        try {
            List<Waiter> waiterList = new Waiter().getAllWaiters();
            WaiterComboBox.removeAllItems(); 
            waiterMap.clear();

            for(Waiter w : waiterList){
                waiterMap.put(w.getWaiterId(), w);
                WaiterComboBox.addItem(w.getWaiterName());
            }

        } 
        catch(Exception ex){
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error loading waiters: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void populateTableList() {
    try {
        String populateTableListQuery = "SELECT table_id, capacity FROM tables WHERE waiter_id IS NULL"; //Only available tables
        Statement stmt = connect.createStatement();
        ResultSet rs = stmt.executeQuery(populateTableListQuery);

        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);

        while(rs.next()){
            int tableId = rs.getInt("table_id");
            int capacity = rs.getInt("capacity");
            
            model.addRow(new Object[]{tableId, capacity});
        }

        if(model.getRowCount() == 0){
            JOptionPane.showMessageDialog(null, "No available tables found.");
        }

    } 
    catch(SQLException ex){
        ex.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error fetching tables: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
}


    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AssignTables.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AssignTables.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AssignTables.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AssignTables.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AssignTables().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AssignWaiterBackButton;
    private javax.swing.JButton AssignWaiterButton;
    private javax.swing.JComboBox<String> WaiterComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
